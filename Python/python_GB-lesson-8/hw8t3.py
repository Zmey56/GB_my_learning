# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта,
# введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NotNumber(Exception):
    def __init__(self, txt):
        self.txt = txt

my_list = []

while True:
    try:
        value = input('Enter the values and press Enter. If you want to stop, enter \'stop\': ')
        if value == 'stop':
            break
        elif value.isdigit() != True:
            raise NotNumber("Value is not number!")
        else:
            value = int(value)
            my_list.append(value)
    except NotNumber as err:
        print(err)
    else:
        print(my_list)

print(my_list)